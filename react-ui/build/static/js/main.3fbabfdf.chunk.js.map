{"version":3,"sources":["common/constants.ts","app/hooks.ts","features/form/formSlice.ts","components/forms/AddPlayerForm/AddPlayerForm.tsx","components/forms/AddMatchForm/AddMatchForm.tsx","views/AddForm/AddFormPage/AddFormPage.tsx","views/Home/Homepage/Homepage.tsx","features/table/columnDefinitions.ts","features/table/tableSlice.ts","components/table/Table.tsx","views/Leaderboard/LeaderboardPage/LeaderboardPage.tsx","App.tsx","reportWebVitals.ts","app/store.ts","index.tsx"],"names":["Constants","useAppDispatch","useDispatch","useAppSelector","useSelector","host","SERVER_HOST_URL","addPlayer","createAsyncThunk","name","thunkAPI","a","fetch","method","headers","body","JSON","stringify","response","json","data","status","rejectWithValue","console","error","addMatch","playerId","opponentId","finalPlayerScore","finalOpponentScore","matchTime","location","fetchPlayerIds","_params","formSlice","createSlice","initialState","errorMessage","isFetching","isSuccess","submitSuccess","isError","playerIds","reducers","clearState","state","extraReducers","builder","addCase","fulfilled","payload","pending","rejected","players","actions","AddPlayerForm","dispatch","useEffect","useState","playerName","setPlayerName","form","Field","Label","Control","Input","color","value","onChange","e","target","required","kind","onClick","disabled","loading","className","AddMatchForm","setLocation","setPlayerId","setOpponentId","setMatchTime","setFinalPlayerScore","setFinalOpponentScore","type","Select","Number","length","map","playerObj","id","selected","preventDefault","submitForm","AddFormPage","formType","setFormType","HomePage","data-testid","matchColumns","Header","accessor","sortType","playerColumns","fetchPlayers","fetchMatches","tableSlice","columns","currentTable","previousTable","PLAYER_ENTITY","matches","MATCHES_ENTITY","Table","useTable","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","role","style","border","headerGroup","getHeaderGroupProps","column","getHeaderProps","getSortByToggleProps","borderBottom","background","fontWeight","render","isSorted","isSortedDesc","row","getRowProps","cells","cell","getCellProps","padding","LeaderboardPage","props","table","entity","breakpoint","App","to","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducer","combineReducers","store","configureStore","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3fbabfdf.chunk.js","sourcesContent":["enum Constants {\r\n    PLAYER_ENTITY = 'PLAYERS',\r\n    MATCHES_ENTITY = 'MATCHES',\r\n    SERVER_HOST_URL = 'localhost:3001'\r\n};\r\n\r\nexport default Constants;","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport type { RootState, AppDispatch } from './store';\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;","// @ts-nocheck\r\n// TODO: Work out types to redux-specific code\r\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport Constants from '../../common/constants';\r\nconst {SERVER_HOST_URL: host} = Constants;\r\n\r\nexport const addPlayer = createAsyncThunk(\r\n    'form/addPlayer',\r\n    async (name: string, thunkAPI) => {\r\n        try {\r\n            const response = await fetch(\r\n                `http://${host}/graphql`,\r\n                {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Accept': 'application/json',\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify({\r\n\"query\": `\r\n    mutation {\r\n        addPlayer(name: \"${name}\") {\r\n            name\r\n            id\r\n        }\r\n}`}),\r\n                });\r\n\r\n            let data = await response.json();\r\n\r\n            if (response.status === 200) {\r\n                return { ...data };\r\n            } else {\r\n                return thunkAPI.rejectWithValue(data);\r\n            }\r\n            // currently, typescript 4.4 uses unknown as a type in the catch statements\r\n            // We use any as we don't have specific type guards currently for these types of errors and don't want to use unknown (we just want a normal error)\r\n            // Post covering the implementation of unknown: https://devblogs.microsoft.com/typescript/announcing-typescript-4-4/#use-unknown-catch-variables\r\n        } catch(e: any) {\r\n            console.error('Error: ', e);\r\n            return thunkAPI.rejectWithValue(e.response.data);\r\n        }\r\n    }\r\n);\r\n\r\nexport const addMatch = createAsyncThunk(\r\n    'form/addMatch',\r\n    async ({playerId, opponentId, finalPlayerScore, finalOpponentScore, matchTime, location}: MatchParams, thunkAPI) => {\r\n        if (playerId === opponentId) {\r\n            return thunkAPI.rejectWithValue({data: 'player and opponent can not be the same.'});\r\n        }\r\n        if (finalPlayerScore === finalOpponentScore) {\r\n            return thunkAPI.rejectWithValue({data: 'there can be no ties.  player and opponent scores can not be the same.'});\r\n        }\r\n        try {\r\n            const response = await fetch(\r\n                `http://${host}/graphql`,\r\n                {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Accept': 'application/json',\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify({\r\n\"query\": `\r\n    mutation {\r\n        addMatch(player_id: ${playerId}, opponent_id: ${opponentId}, finalPlayerScore: ${finalPlayerScore}, finalOpponentScore: ${finalOpponentScore}, matchTime:\"${matchTime}\", location:\"${location}\") {\r\n            id\r\n        }\r\n}`}),\r\n                });\r\n\r\n            let data = await response.json();\r\n\r\n            if (response.status === 200) {\r\n                return { ...data };\r\n            } else {\r\n                return thunkAPI.rejectWithValue(data);\r\n            }\r\n            // currently, typescript 4.4 uses unknown as a type in the catch statements\r\n            // We use any as we don't have specific type guards currently for these types of errors and don't want to use unknown (we just want a normal error)\r\n            // Post covering the implementation of unknown: https://devblogs.microsoft.com/typescript/announcing-typescript-4-4/#use-unknown-catch-variables\r\n        } catch(e: any) {\r\n            console.error('Error: ', e);\r\n            return thunkAPI.rejectWithValue(e.response.data);\r\n        }\r\n    }\r\n);\r\n\r\nexport const fetchPlayerIds = createAsyncThunk(\r\n    'form/fetchPlayerIds',\r\n    async (_params, thunkAPI) => {\r\n        try {\r\n            const response = await fetch(\r\n                `http://${host}/graphql`,\r\n                {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Accept': 'application/json',\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify({\r\n    \"query\": `\r\n    {\r\n        players {\r\n            name\r\n            id\r\n        }\r\n}`}),\r\n                }\r\n            );\r\n\r\n            let data = await response.json();\r\n\r\n            if (response.status === 200) {\r\n                return { ...data };\r\n            } else {\r\n                return thunkAPI.rejectWithValue(data);\r\n            }\r\n        } catch (e: any) {\r\n            console.error('Error: ', e);\r\n            if (e && e.response) {\r\n                return thunkAPI.rejectWithValue(e.response.data);\r\n            }\r\n        }\r\n    });\r\n\r\ninterface PlayerId {\r\n    id: string;\r\n    name: string;\r\n}\r\n\r\nexport interface FormState {\r\n    errorMessage: string; \r\n    isFetching: boolean;\r\n    isSuccess: boolean;\r\n    isError: boolean;\r\n    submitSuccess: boolean;\r\n    playerIds: PlayerId[];\r\n}\r\n\r\nconst initialState: FormState = {\r\n    errorMessage: \"\",\r\n    isFetching: false,\r\n    isSuccess: false,\r\n    submitSuccess: false,\r\n    isError: false,\r\n    playerIds: []\r\n};\r\n\r\nexport const formSlice = createSlice({\r\n    name: \"form\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        clearState: (state) => {\r\n            state.isFetching = false;\r\n            state.isSuccess = false;\r\n            state.isError  = false;\r\n            state.submitSuccess = false;\r\n\r\n            return state;\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(addPlayer.fulfilled, (state, {payload}) => {\r\n                state.isFetching = false;\r\n                state.isSuccess = true;\r\n                state.submitSuccess = true;\r\n            })\r\n            .addCase(addPlayer.pending, (state, {payload}) => {\r\n                state.isFetching = true;\r\n            })\r\n            .addCase(addPlayer.rejected, (state, {payload}) => {\r\n                state.isFetching = false;\r\n                state.isError = true;\r\n                state.errorMessage = payload.data; \r\n            })\r\n            .addCase(addMatch.fulfilled, (state, {payload}) => {\r\n                state.isFetching = false;\r\n                state.isSuccess = true;\r\n                state.submitSuccess = true;\r\n            })\r\n            .addCase(addMatch.pending, (state, {payload}) => {\r\n                state.isFetching = true;\r\n            })\r\n            .addCase(addMatch.rejected, (state, {payload}) => {\r\n                state.isFetching = false;\r\n                state.isError = true;\r\n                state.errorMessage = payload.data; \r\n            })\r\n            .addCase(fetchPlayerIds.pending, (state, {payload}) => {\r\n                state.isFetching = true;\r\n            })\r\n            .addCase(fetchPlayerIds.fulfilled, (state, {payload}) => {\r\n                state.playerIds = payload.data.players;\r\n                state.isFetching = false;\r\n                state.isSuccess = true;\r\n            });\r\n    }\r\n});\r\n\r\nexport const { clearState } = formSlice.actions;\r\n\r\nexport default formSlice.reducer;","import React, { useEffect, useState } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../../app/hooks';\r\nimport { RootState } from '../../../app/store';\r\nimport { addPlayer, clearState } from '../../../features/form/formSlice';\r\n\r\nimport { Button, Form } from 'react-bulma-components';\r\n\r\nfunction AddPlayerForm(): React.ReactElement | null {\r\n    const dispatch = useAppDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(clearState());\r\n    }, [dispatch]);\r\n\r\n    const [playerName, setPlayerName]: [string, (result: string) => void] = useState('');\r\n\r\n    const { errorMessage, isError, isFetching, submitSuccess } = useAppSelector((state: RootState) => state.form);\r\n\r\n    const submitForm = () => {\r\n        if (playerName !== '') {\r\n            dispatch(addPlayer(playerName));\r\n            dispatch(clearState())\r\n            setPlayerName('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Form.Field>\r\n                <Form.Label>Player Name</Form.Label>\r\n                <Form.Control>\r\n                    <Form.Input \r\n                        color=\"success\"\r\n                        value={playerName}\r\n                        onChange={(e) => {\r\n                            return setPlayerName(e.target.value);\r\n                        }}\r\n                        required\r\n                    />\r\n                </Form.Control>\r\n            </Form.Field>\r\n            <Form.Field kind=\"group\">\r\n                <Form.Control>\r\n                    <Button onClick={() => submitForm()} color=\"link\" disabled={isFetching || playerName === ''}>Submit</Button>\r\n                </Form.Control>\r\n                {isFetching && (<Form.Control loading>\r\n                    Posting your data...\r\n                </Form.Control>)}\r\n\r\n                {isError && (<Form.Control>\r\n                    <span className=\"error-message\">Error: {errorMessage}</span>\r\n                </Form.Control>)}\r\n\r\n                {submitSuccess && (<Form.Control>\r\n                    <span className=\"success-message\">Your data has been posted successfully!</span>\r\n                </Form.Control>)}\r\n            </Form.Field>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default AddPlayerForm;","import React, { useEffect, useState } from 'react';\r\nimport { Button, Form } from 'react-bulma-components';\r\nimport { useAppDispatch, useAppSelector } from '../../../app/hooks';\r\nimport { RootState } from '../../../app/store';\r\nimport { MatchParams } from '../../../common/types';\r\nimport { addMatch, clearState, fetchPlayerIds } from '../../../features/form/formSlice';\r\n\r\nfunction AddMatchForm(): React.ReactElement | null {\r\n    const dispatch = useAppDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(clearState());\r\n        dispatch(fetchPlayerIds());\r\n    }, [dispatch]);\r\n\r\n    const [location, setLocation]: [string, (result: string) => void] = useState('');\r\n    // TODO: fix hacky implementation where we use the first id and second id as player and opponent ids respectively as defaults.\r\n    // This will break once we have uuids or other type of ids\r\n    const [playerId, setPlayerId]: [number, (result: number) => void] = useState(1);\r\n    const [opponentId, setOpponentId]: [number, (result: number) => void] = useState(2);\r\n    const [matchTime, setMatchTime]: [string, (result: string) => void] = useState('');\r\n    const [finalPlayerScore, setFinalPlayerScore]: [number, (result: number) => void] = useState(0);\r\n    const [finalOpponentScore, setFinalOpponentScore]: [number, (result: number) => void] = useState(0);\r\n\r\n    const { errorMessage, isError, isFetching, playerIds, submitSuccess } = useAppSelector((state: RootState) => state.form);\r\n\r\n    const submitForm = (e: React.MouseEvent<HTMLElement>): void => {\r\n        e.preventDefault();\r\n        dispatch(clearState());\r\n        const matchParams: MatchParams = {\r\n            playerId,\r\n            finalPlayerScore,\r\n            finalOpponentScore,\r\n            location,\r\n            opponentId,\r\n            matchTime\r\n        };\r\n\r\n        dispatch(addMatch(matchParams));\r\n        // TODO: simplify the state into a single object that can be set back to default\r\n        // Consider storing it in the redux state (although it might be easier to store it in the component itself)\r\n        setLocation('');\r\n        setPlayerId(1);\r\n        setOpponentId(2);\r\n        setMatchTime('');\r\n        setFinalPlayerScore(0);\r\n        setFinalOpponentScore(0);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Form.Field>\r\n                <Form.Label>Match Location</Form.Label>\r\n                <Form.Control>\r\n                    <Form.Input \r\n                        value={location}\r\n                        onChange={(e) => {\r\n                            return setLocation(e.target.value);\r\n                        }}\r\n                        required\r\n                    />\r\n                </Form.Control>\r\n            </Form.Field>\r\n            <Form.Field>\r\n                <Form.Label>Match Date</Form.Label>\r\n                <Form.Control>\r\n                    <Form.Input \r\n                        type=\"date\"\r\n                        value={matchTime}\r\n                        onChange={(e) => {\r\n                            return setMatchTime(e.target.value);\r\n                        }}\r\n                        required\r\n                    />\r\n                </Form.Control>\r\n            </Form.Field>\r\n            <Form.Field>\r\n                <Form.Label>Player Id</Form.Label>\r\n                <Form.Control>\r\n                    <Form.Select \r\n                        value={playerId}\r\n                        onChange={(e) => {\r\n                            return setPlayerId(Number(e.target.value));\r\n                        }}\r\n                        required\r\n                    >\r\n                        { playerIds.length === 0 && isFetching ? 'searching' : playerIds.map((playerObj) => {\r\n                            const {name, id} = playerObj;\r\n                            if (Number(id) === playerId) {\r\n                                return <option key={`${name}-${id}`} value={id} selected>{name}</option>\r\n                            }\r\n\r\n                            return <option key={`${name}-${id}`} value={id}>{name}</option>\r\n                        })}\r\n                    </Form.Select>\r\n                </Form.Control>\r\n            </Form.Field>\r\n            <Form.Field>\r\n                <Form.Label>Opponent Id</Form.Label>\r\n                <Form.Control>\r\n                    <Form.Select \r\n                        value={opponentId}\r\n                        onChange={(e) => {\r\n                            return setOpponentId(Number(e.target.value));\r\n                        }}\r\n                        required\r\n                    >\r\n\r\n                        { playerIds.length === 0 && isFetching ? 'searching' : playerIds.map((playerObj) => {\r\n                            const {name, id} = playerObj;\r\n                            if (Number(id) === opponentId) {\r\n                                return <option key={`${name}-${id}`} value={id} selected>{name}</option>\r\n                            }\r\n\r\n                            return <option key={`${name}-${id}`} value={id}>{name}</option>\r\n                        })}\r\n                    </Form.Select>\r\n                </Form.Control>\r\n            </Form.Field>\r\n            <Form.Field>\r\n                <Form.Label>Final Player Score</Form.Label>\r\n                <Form.Control>\r\n                    <Form.Input \r\n                        onChange={(e) => {\r\n                            return setFinalPlayerScore(Number(e.target.value));\r\n                        }}\r\n                        type={\"number\"}\r\n                        value={finalPlayerScore}\r\n                        required\r\n                    />\r\n                </Form.Control>\r\n            </Form.Field>\r\n            <Form.Field>\r\n                <Form.Label>Final Opponent Score</Form.Label>\r\n                <Form.Control>\r\n                    <Form.Input \r\n                        onChange={(e) => {\r\n                            return setFinalOpponentScore(Number(e.target.value));\r\n                        }}\r\n                        type={\"number\"}\r\n                        value={finalOpponentScore}\r\n                        required\r\n                    />\r\n                </Form.Control>\r\n            </Form.Field>\r\n            <Form.Field kind=\"group\">\r\n                <Form.Control>\r\n                    <Button onClick={(e: React.MouseEvent<HTMLElement>) => submitForm(e)} color=\"link\" disabled={isFetching}>Submit</Button>\r\n                </Form.Control>\r\n                \r\n            </Form.Field>\r\n            <Form.Field kind=\"group\">\r\n                {isFetching && (<Form.Control loading>\r\n                    Posting your data...\r\n                </Form.Control>)}\r\n\r\n                {isError && (<Form.Control>\r\n                    <span className=\"error-message\">Error: {errorMessage}</span>\r\n                </Form.Control>)}\r\n\r\n                {submitSuccess && (<Form.Control>\r\n                    <span className=\"success-message\">Your data has been posted successfully!</span>\r\n                </Form.Control>)}\r\n            </Form.Field>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default AddMatchForm;","import React, { useState } from 'react';\r\nimport { Box, Container, Form } from 'react-bulma-components';\r\nimport AddPlayerForm from '../../../components/forms/AddPlayerForm/AddPlayerForm';\r\nimport AddMatchForm from '../../../components/forms/AddMatchForm/AddMatchForm';\r\nimport '../../../css/AddFormPage.css';\r\n\r\nfunction AddFormPage(): React.ReactElement | null {\r\n    const [formType, setFormType]: [string, (result: string) => void] = useState('add-player');\r\n\r\n    return (\r\n        <>\r\n            <Container className=\"form-container\">\r\n                <Box>\r\n                    <form>\r\n                        <Form.Field>\r\n                            <Form.Label>Form Type</Form.Label>\r\n                            <Form.Control>\r\n                                <Form.Select\r\n                                    value={formType}\r\n                                    onChange={(e) => {\r\n                                        return setFormType(e.target.value)\r\n                                    }}>\r\n                                        <option value=\"add-player\">Add Player</option>\r\n                                        <option value=\"add-match\">Add Match</option>\r\n                                </Form.Select>\r\n                            </Form.Control>\r\n                        </Form.Field>\r\n                        { formType === 'add-player' ? <AddPlayerForm /> : <AddMatchForm />}\r\n                    </form>\r\n                </Box>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddFormPage;","import React from 'react';\r\n\r\nfunction HomePage() {\r\n  return (\r\n    <>\r\n      <div data-testid=\"HomePage\">Home page placeholder.  Click on a nav link and navigate around!</div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default HomePage;","export const matchColumns = [\r\n    {\r\n        Header: 'Match Date',\r\n        accessor: 'matchTime',\r\n        sortType: 'basic'\r\n    },\r\n    {\r\n        Header: 'Location',\r\n        accessor: 'location', \r\n        sortType: 'basic'\r\n    },\r\n    {\r\n        Header: 'Player Id',\r\n        accessor: 'player_id',\r\n        sortType: 'basic'\r\n    },\r\n    {\r\n        Header: 'Player Score',\r\n        accessor: 'finalPlayerScore',\r\n        sortType: 'basic'\r\n    },\r\n    {\r\n        Header: 'Opponent Id',\r\n        accessor: 'opponent_id',\r\n        sortType: 'basic'\r\n    },\r\n    {\r\n        Header: 'Opponent Score',\r\n        accessor: 'finalOpponentScore',\r\n        sortType: 'basic'\r\n    },\r\n];\r\n\r\nexport const playerColumns = [\r\n    {\r\n        Header: 'Player Id',\r\n        accessor: 'id',\r\n        sortType: 'basic'\r\n    },\r\n    {\r\n        Header: 'Player Name',\r\n        accessor: 'name', \r\n        sortType: 'basic'\r\n    },\r\n    {\r\n        Header: 'Wins',\r\n        accessor: 'wins',\r\n        sortType: 'basic'\r\n    },\r\n\r\n    {\r\n        Header: 'Losses',\r\n        accessor: 'losses',\r\n        sortType: 'basic'\r\n    },\r\n    {\r\n        Header: 'Total Matches Played',\r\n        accessor: 'gamesPlayed',\r\n        sortType: 'basic'\r\n    },\r\n    {\r\n        Header: 'Rating',\r\n        accessor: 'rating',\r\n        sortType: 'basic'\r\n    },\r\n];","// @ts-nocheck\r\n// TODO: Work out types to redux-specific code\r\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport Constants from '../../common/constants';\r\nimport { playerColumns, matchColumns } from './columnDefinitions';\r\nconst {SERVER_HOST_URL: host} = Constants;\r\n\r\nexport const fetchPlayers = createAsyncThunk(\r\n    'table/fetchPlayers',\r\n    async (_params, thunkAPI) => {\r\n        try {\r\n            const response = await fetch(\r\n                `http://${host}/graphql`,\r\n                {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Accept': 'application/json',\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify({\r\n    \"query\": `\r\n    {\r\n        players {\r\n            name\r\n            wins\r\n            losses\r\n            gamesPlayed\r\n            rating\r\n            id\r\n        }\r\n}`}),\r\n                }\r\n            );\r\n\r\n            let data = await response.json();\r\n\r\n            if (response.status === 200) {\r\n                return { ...data };\r\n            } else {\r\n                return thunkAPI.rejectWithValue(data);\r\n            }\r\n        } catch (e: any) {\r\n            console.error('Error: ', e);\r\n            if (e && e.response) {\r\n                return thunkAPI.rejectWithValue(e.response.data);\r\n            }\r\n        }\r\n    });\r\n\r\nexport const fetchMatches = createAsyncThunk(\r\n    'table/fetchMatches',\r\n    async (_params, thunkAPI) => {\r\n        try {\r\n            const response = await fetch(\r\n                `http://${host}/graphql`,\r\n                {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Accept': 'application/json',\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify({\r\n    \"query\": `\r\n    {\r\n        matches {\r\n            matchTime\r\n            location\r\n            opponent_id\r\n            player_id\r\n            finalPlayerScore\r\n            finalOpponentScore\r\n        }\r\n}`}),\r\n                }\r\n            );\r\n\r\n            let data = await response.json();\r\n\r\n            if (response.status === 200) {\r\n                return { ...data };\r\n            } else {\r\n                return thunkAPI.rejectWithValue(data);\r\n            }\r\n        } catch (e: any) {\r\n            console.error('Error: ', e);\r\n            if (e && e.response) {\r\n                return thunkAPI.rejectWithValue(e.response.data);\r\n            }\r\n        }\r\n    });\r\n\r\nexport const tableSlice = createSlice({\r\n    name: \"table\",\r\n    initialState: {\r\n        columns: [],\r\n        currentTable: '',\r\n        data: {},\r\n        errorMessage: \"\",\r\n        isFetching: false,\r\n        isSuccess: false,\r\n        isError: false,\r\n        previousTable: ''\r\n    },\r\n    reducers: {\r\n        clearState: (state) => {\r\n            state.isFetching = false;\r\n            state.isSuccess = false;\r\n            state.isError = false;\r\n            state.data = {};\r\n            state.columns = [];\r\n\r\n            return state;\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        // TODO: add error cases when the promises fail for fetch players and fetch matches through the api.\r\n        builder\r\n            .addCase(fetchPlayers.fulfilled, (state, {payload}) => {\r\n                state.columns = playerColumns;\r\n                state.data = payload.data.players;\r\n                state.isFetching = false;\r\n                state.isSuccess = true;\r\n                state.previousTable = state.currentTable;\r\n                state.currentTable = Constants.PLAYER_ENTITY;\r\n            })\r\n            .addCase(fetchPlayers.pending, (state, {payload}) => {\r\n                state.isFetching = true;\r\n            })\r\n            .addCase(fetchMatches.fulfilled, (state, {payload}) => {\r\n                state.columns = matchColumns;\r\n                state.data = payload.data.matches;\r\n                state.isFetching = false;\r\n                state.isSuccess = true;\r\n                state.previousTable = state.currentTable;\r\n                state.currentTable = Constants.MATCHES_ENTITY;\r\n            })\r\n            .addCase(fetchMatches.pending, (state, {payload}) => {\r\n                state.isFetching = true;\r\n            });\r\n    },\r\n});\r\n\r\nexport const { clearState } = tableSlice.actions;","import React from 'react';\r\nimport { useTable, useSortBy } from 'react-table';\r\nimport '../../css/Table.css';\r\n\r\ninterface TableColumn {\r\n    Header: string;\r\n    accessor: string;\r\n    sortType: string;\r\n}\r\n\r\ninterface TableProps {\r\n    columns: TableColumn[];\r\n    data: any;\r\n}\r\n\r\nfunction Table({ columns, data }: TableProps): React.ReactElement | null {\r\n   const {\r\n     getTableProps,\r\n     getTableBodyProps,\r\n     headerGroups,\r\n     rows,\r\n     prepareRow\r\n     // TODO: Fix typescript error that occurs due to type mismatch by extending the Column type.\r\n     // Use the following for reference https://github.com/tannerlinsley/react-table/issues/3064\r\n   } = useTable<any>({ columns, data }, useSortBy)\r\n \r\n   return (\r\n     <table {...getTableProps()} role=\"table\" style={{ border: 'solid 1px blue' }} data-testid=\"leaderboard\">\r\n       <thead>\r\n         {headerGroups.map(headerGroup => (\r\n           <tr {...headerGroup.getHeaderGroupProps()} data-testid='header-row'>\r\n             {headerGroup.headers.map(column => (\r\n               <th\r\n                 {...column.getHeaderProps(column.getSortByToggleProps())}\r\n                 style={{\r\n                   borderBottom: 'solid 3px red',\r\n                   background: 'aliceblue',\r\n                   color: 'black',\r\n                   fontWeight: 'bold',\r\n                 }}\r\n               >\r\n                 {column.render('Header')}\r\n                 <div className=\"pointer-block\">\r\n                    <span>\r\n                        {column.isSorted ? (column.isSortedDesc ? '↑' : '↓') : ''}\r\n                    </span>\r\n                 </div>\r\n               </th>\r\n             ))}\r\n           </tr>\r\n         ))}\r\n       </thead>\r\n       <tbody {...getTableBodyProps()}>\r\n         {rows.map(row => {\r\n           prepareRow(row)\r\n           return (\r\n             <tr {...row.getRowProps()}>\r\n               {row.cells.map(cell => {\r\n                 return (\r\n                   <td\r\n                     {...cell.getCellProps()}\r\n                     style={{\r\n                       padding: '10px',\r\n                       border: 'solid 1px gray',\r\n                       background: 'papayawhip',\r\n                     }}\r\n                   >\r\n                     {cell.render('Cell')}\r\n                   </td>\r\n                 )\r\n               })}\r\n             </tr>\r\n           )\r\n         })}\r\n       </tbody>\r\n     </table>\r\n   )\r\n }\r\n\r\nexport default Table;","import React, { useEffect } from 'react';\r\nimport { Box, Block, Container } from 'react-bulma-components';\r\nimport { useAppDispatch, useAppSelector  } from '../../../app/hooks';\r\nimport Constants from '../../../common/constants';\r\nimport { clearState, fetchMatches, fetchPlayers } from '../../../features/table/tableSlice';\r\nimport '../../../css/bulma.min.css';\r\nimport '../../../css/leaderboard.css';\r\n\r\nimport {LeaderboardPageProps} from '../../../common/types';\r\nimport Table from '../../../components/table/Table';\r\n\r\nfunction LeaderboardPage(props: LeaderboardPageProps): React.ReactElement | null {\r\n    const dispatch = useAppDispatch();\r\n\r\n    const { data, columns, currentTable, isFetching } = useAppSelector((state) => state.table);\r\n\r\n    const { entity } = props;\r\n\r\n    useEffect(() => {\r\n        dispatch(clearState());\r\n        switch(entity) {\r\n            case Constants.PLAYER_ENTITY:\r\n                dispatch(fetchPlayers());\r\n                break;\r\n            case Constants.MATCHES_ENTITY:\r\n                dispatch(fetchMatches());\r\n                break;\r\n        }\r\n    }, [currentTable, entity, dispatch]);\r\n\r\n    return (\r\n        <>\r\n            <Container breakpoint=\"widescreen\" className=\"app-container\">\r\n                <Box className='leaderboard-box'>\r\n                    <Block>\r\n                        <div className=\"leaderboard-title\">\r\n                            Leaderboard\r\n                        </div>\r\n                    </Block>\r\n                    { isFetching ? 'Fetching...' : <Table columns={columns} data={data} /> }\r\n                </Box>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LeaderboardPage;","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from 'react-router-dom';\nimport { Container } from 'react-bulma-components';\nimport Constants from './common/constants';\nimport AddFormPage from './views/AddForm/AddFormPage/AddFormPage';\nimport HomePage from './views/Home/Homepage/Homepage';\nimport LeaderboardPage from './views/Leaderboard/LeaderboardPage/LeaderboardPage';\nimport './css/App.css';\nimport './css/bulma.min.css';\n\n\nfunction App(): React.ReactElement | null {\n  return (\n    <>\n      <Router>\n        <div>\n          <nav>\n            <ul>\n              <li>\n                <Link to='/'>Home</Link>\n              </li>\n              <li>\n                <Link to='/players'>Players</Link>\n              </li>\n              <li>\n                <Link to='/matches'>Matches</Link>\n              </li>\n              <li>\n                <Link to='/add-form'>Add Form</Link>\n              </li>\n            </ul>\n          </nav>\n\n          <Container breakpoint=\"widescreen\" className=\"app-container\">\n            <Switch>\n              <Route exact path=\"/\">\n                <HomePage />\n              </Route>\n              <Route path=\"/add-form\">\n                <AddFormPage />\n              </Route>\n              <Route path=\"/matches\">\n                <LeaderboardPage entity={Constants.MATCHES_ENTITY}/>\n              </Route>\n              <Route path=\"/players\">\n                <LeaderboardPage entity={Constants.PLAYER_ENTITY} />\n              </Route>\n            </Switch>\n          </Container>\n          \n        </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers, configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport { tableSlice } from '../features/table/tableSlice';\r\nimport { formSlice } from '../features/form/formSlice';\r\n\r\nconst reducer = combineReducers({form: formSlice.reducer, table: tableSlice.reducer});\r\n    \r\nexport const store = configureStore({\r\n    reducer: reducer,\r\n});\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n    ReturnType,\r\n    RootState,\r\n    unknown,\r\n    Action<string>\r\n>;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { store } from './app/store';\nimport './css/index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}